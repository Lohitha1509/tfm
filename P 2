import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.api import SimpleExpSmoothing, ExponentialSmoothing
data1 = pd.read_csv("airline-passengers.csv", names=['Month', 'Passengers'])
data1['Month'] = pd.to_datetime(data1['Month'])
data1.set_index('Month', inplace=True)
train_size = int(len(data1) * 0.8)
train, test = data1.iloc[:train_size], data1.iloc[train_size:]
plt.figure(figsize=(12, 12))
plt.subplot(3, 1, 1)
plt.plot(train.index, train['Passengers'], label='Train', color='blue')
plt.plot(test.index, test['Passengers'], label='Test', color='green')
plt.title('Actual Data')
plt.xlabel('Date')
plt.ylabel('Passengers')
plt.legend()
window_size = 12
data1['SMA'] = data1['Passengers'].rolling(window=window_size).mean()
plt.subplot(3, 1, 2)
plt.plot(train.index, train['Passengers'], label='Train', color='blue')
plt.plot(test.index, test['Passengers'], label='Test', color='green')
plt.plot(data1.index, data1['SMA'], label='Simple Moving Average', color='red')
plt.title('Simple Moving Average')
plt.xlabel('Date')
plt.ylabel('Passengers')
plt.legend()
alpha = 0.2
model = SimpleExpSmoothing(train['Passengers']).fit(smoothing_level=alpha, optimized=False)
forecast_ses = model.forecast(len(test))
plt.subplot(3, 1, 3)
plt.plot(train.index, train['Passengers'], label='Train', color='blue')
plt.plot(test.index, test['Passengers'], label='Test', color='green')
plt.plot(test.index, forecast_ses, label='Simple Exponential Smoothing', color='red')
plt.title('Simple Exponential Smoothing')
plt.xlabel('Date')
plt.ylabel('Passengers')
plt.legend()
plt.tight_layout()
plt.show()
model = ExponentialSmoothing(train['Passengers'], trend='add', seasonal='add').fit()
forecast_hw = model.forecast(len(test))
plt.figure(figsize=(12, 6))
plt.plot(train.index, train['Passengers'], label='Train', color='blue')
plt.plot(test.index, test['Passengers'], label='Test', color='green')
plt.plot(test.index, forecast_hw, label='Holt-Winters Forecast', color='red')
plt.title('Holt-Winters Forecasting')
plt.xlabel('Date')
plt.ylabel('Passengers')
plt.legend()
plt.show()
